- name: create droplet
  hosts: localhost
  gather_facts: false
  connection: local
  vars:
    digitalocean_token: "{{ lookup('ansible.builtin.env', 'DIGITALOCEAN_TOKEN') }}"
  tasks:
    - name: Create SSH key
      community.digitalocean.digital_ocean_sshkey:
        oauth_token: "{{ digitalocean_token }}"
        name: argocd-poc
        ssh_pub_key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
        state: present
      register: ssh_key

    - name: Create a new Droplet
      register: droplet
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ digitalocean_token }}"
        state: present
        name: argocd-poc
        unique_name: true
        size: s-2vcpu-4gb
        region: nyc3
        image: debian-11-x64
        wait_timeout: 500
        ssh_keys:
          - "{{ ssh_key.data.ssh_key.id }}"

    - name: register IP as fact
      ansible.builtin.set_fact:
        droplet_ip: "{{ (droplet.data.droplet.networks.v4 | selectattr('type', 'equalto', 'public')).0.ip_address | default('<none>', true) }}"
        cacheable: true

    - name: print droplet IP
      ansible.builtin.debug:
        msg: "droplet IP: {{ ansible_facts.droplet_ip }}"

    - name: write to file
      local_action: copy content="{{ ansible_facts.droplet_ip }}" dest="/tmp/droplet-ip.txt"

    - name: Add host to inventory
      ansible.builtin.add_host:
        name: "{{ ansible_facts.droplet_ip }}"
        groups: "new_droplet"
        ansible_user: root

- name: setup user
  hosts: new_droplet
  gather_facts: false
  tasks:
    - name: Ensure user "debian" exists
      ansible.builtin.user:
        name: debian
        shell: /bin/bash
        groups: sudo
        create_home: true
        home: /home/debian
        append: yes
        password: "{{ 'foobar123' | password_hash('sha512') }}"

    - name: add ssh key
      ansible.posix.authorized_key:
        user: debian
        state: present
        key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"

- name: setup packages
  hosts: new_droplet
  gather_facts: false
  tasks:
    - name: update apt cache
      ansible.builtin.apt:
        update_cache: yes

    - name: Install a list of packages
      ansible.builtin.apt:
        pkg:
          - jq
          - git
          - acl

    - name: safe upgrade
      ansible.builtin.apt:
        upgrade: safe

    - name: dist upgrade
      ansible.builtin.apt:
        upgrade: dist

    - name: Remove dependencies that are no longer required
      ansible.builtin.apt:
        autoremove: yes

    # TODO: poweroff + powercycle here to force new freshest kernel?

- name: install k3s
  hosts: new_droplet
  become: true
  become_user: debian
  environment:
    USER_KUBE_PATH: "{{ ansible_env.HOME }}/.kube"
  tasks:
    - name: Check for kubectl binary
      ansible.builtin.command:
        cmd: "which kubectl"
      register: kubectl_check
      ignore_errors: yes

    - name: Download and install k3s if kubectl not found
      ansible.builtin.shell: "curl -sfL https://get.k3s.io | sh -"
      become: true
      become_user: root
      when: kubectl_check.rc != 0

    - name: get kubeconfig
      ansible.builtin.shell: "k3s kubectl config view --raw"
      become: true
      become_user: root
      register: kubeconfig

    - name: print kubeconfig
      ansible.builtin.debug:
        msg: "kubeconfig: {{ kubeconfig.stdout }}"

    - name: configure kubeconfig for user
      ansible.builtin.shell: |
        mkdir $USER_KUBE_PATH 2> /dev/null
        echo "{{ kubeconfig.stdout }}" > $USER_KUBE_PATH/config
        chmod 600 $USER_KUBE_PATH/config

    - name: write to file
      delegate_to: localhost
      become: true
      become_user: "{{ lookup('env', 'USER') }}"
      ansible.builtin.shell: 'echo "{{ kubeconfig.stdout }}" > /tmp/kubeconfig'

- name: install argocd-cli
  hosts: new_droplet
  gather_facts: false
  become: true
  become_user: debian
  tasks:
    - name: Check for binary
      ansible.builtin.command:
        cmd: "which argocd"
      register: argocd_check
      ignore_errors: yes

    - name: Download and install argocd-cli if not found
      become: true
      become_user: root
      ansible.builtin.shell: "wget https://github.com/argoproj/argo-cd/releases/download/v2.6.7/argocd-linux-amd64 && chmod +x argocd-linux-amd64 && mv argocd-linux-amd64 /usr/local/bin/argocd"
      when: argocd_check.rc != 0

- name: deploy argocd
  hosts: new_droplet
  gather_facts: false
  become: true
  become_user: debian
  environment:
    KUBECONFIG: "{{ ansible_env.HOME }}/.kube/config"
  tasks:
    - name: create namespace
      ansible.builtin.shell: "kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -"

    - name: rollout
      ansible.builtin.shell: |
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/v2.6.7/manifests/install.yaml
        kubectl wait deployment -n argocd argocd-server --for condition=Available=True --timeout=90s
      timeout: 300
      retries: 3
      register: result
      until: result.rc == 0

    - name: get IP
      ansible.builtin.shell: "kubectl -n argocd get service/argocd-server -o=jsonpath='{.spec.clusterIP}'"
      register: argocd_server_cluster_ip

    - name: get password
      ansible.builtin.shell: "kubectl -n argocd get secret argocd-initial-admin-secret -o json | jq -r '.data.password' | base64 -d"
      register: argocd_password

    - name: log in to argocd cli
      ansible.builtin.shell: "argocd login {{ argocd_server_cluster_ip.stdout }}:443 --username admin --password {{ argocd_password.stdout }} --insecure"

    - name: print password
      ansible.builtin.debug:
        msg: "argocd admin password: {{ argocd_password.stdout }}"

    - name: write to file
      delegate_to: localhost
      become: true
      become_user: "{{ lookup('env', 'USER') }}"
      ansible.builtin.shell: 'echo "{{ argocd_password.stdout }}" > /tmp/argocd-password.txt'
